// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250515022112_add weekend in DailyMeal")]
    partial class addweekendinDailyMeal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitys.AuthModel.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool?>("IsLastChild")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsParrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsLastChild = false,
                            IsParrent = true,
                            Name = "Dashboard",
                            Url = "/dashboard"
                        },
                        new
                        {
                            Id = 2,
                            IsLastChild = true,
                            IsParrent = false,
                            Name = "Users",
                            ParentId = 1,
                            Url = "/users"
                        },
                        new
                        {
                            Id = 3,
                            IsLastChild = true,
                            IsParrent = true,
                            Name = "Settings",
                            Url = "/settings"
                        });
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            MenuId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            MenuId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            MenuId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("JobStationId")
                        .HasColumnType("int");

                    b.Property<string>("OfficeEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardNumber = "12346",
                            ContactNo = "01711111111",
                            DepartmentId = 1,
                            DesignationId = 1,
                            EmployeeCode = "EMP001",
                            EmployeeId = 1001,
                            EmployeeName = "System Admin",
                            JobStationId = 1,
                            OfficeEmail = "admin@company.com",
                            Password = "Admin@123",
                            UnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardNumber = "12345",
                            ContactNo = "01722222222",
                            DepartmentId = 2,
                            DesignationId = 2,
                            EmployeeCode = "EMP002",
                            EmployeeId = 1002,
                            EmployeeName = "John Doe",
                            JobStationId = 2,
                            OfficeEmail = "john.doe@company.com",
                            Password = "User@123",
                            UnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardNumber = "1234",
                            ContactNo = "01733333333",
                            DepartmentId = 3,
                            DesignationId = 3,
                            EmployeeCode = "EMP003",
                            EmployeeId = 1003,
                            EmployeeName = "Jane Smith",
                            JobStationId = 3,
                            OfficeEmail = "jane.smith@company.com",
                            Password = "HR@123",
                            UnitId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entitys.MealModel.DailyMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BreakTotalTaken")
                        .HasColumnType("float");

                    b.Property<double?>("Breakfast")
                        .HasColumnType("float");

                    b.Property<double?>("BreakfastGuest")
                        .HasColumnType("float");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("DATEFROMPARTS([Year], [Month], [Day])", true);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<double?>("Dinner")
                        .HasColumnType("float");

                    b.Property<double?>("DinnerGuest")
                        .HasColumnType("float");

                    b.Property<double?>("DinnerTotalTaken")
                        .HasColumnType("float");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBreakfastComplete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBreakfastTaken")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDinnerComplete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDinnerTaken")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLunchComplete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLunchTaken")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<double?>("Lunch")
                        .HasColumnType("float");

                    b.Property<double?>("LunchGuest")
                        .HasColumnType("float");

                    b.Property<double?>("LunchTotalTaken")
                        .HasColumnType("float");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Year", "Month");

                    b.HasIndex("Year", "Month", "Day");

                    b.HasIndex("EmployeeId", "Year", "Month", "Day")
                        .IsUnique();

                    b.ToTable("DailyMeals", null, t =>
                        {
                            t.HasCheckConstraint("CK_DailyMeal_PositiveMeals", "(Breakfast IS NULL OR Breakfast >= 0) AND (Lunch IS NULL OR Lunch >= 0) AND (Dinner IS NULL OR Dinner >= 0) AND (BreakfastGuest IS NULL OR BreakfastGuest >= 0) AND (LunchGuest IS NULL OR LunchGuest >= 0) AND (DinnerGuest IS NULL OR DinnerGuest >= 0)");

                            t.HasCheckConstraint("CK_DailyMeal_ValidDate", "Year BETWEEN 2000 AND 2100 AND Month BETWEEN 1 AND 12 AND Day BETWEEN 1 AND 31 AND (Day <= CASE     WHEN Month IN (1,3,5,7,8,10,12) THEN 31     WHEN Month IN (4,6,9,11) THEN 30     WHEN Year % 4 = 0 AND (Year % 100 != 0 OR Year % 400 = 0) THEN 29     ELSE 28 END)");
                        });
                });

            modelBuilder.Entity("Domain.Entitys.MealModel.EmployeeMealDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Breakfast")
                        .HasColumnType("float");

                    b.Property<double?>("BreakfastGuest")
                        .HasColumnType("float");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Dinner")
                        .HasColumnType("float");

                    b.Property<double?>("DinnerGuest")
                        .HasColumnType("float");

                    b.Property<bool?>("IsFridaydayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsMondayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsSaturdayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsSundayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsThursdayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsTuesdayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsWednesdayMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<double?>("Lunch")
                        .HasColumnType("float");

                    b.Property<double?>("LunchGuest")
                        .HasColumnType("float");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeMealDays", (string)null);
                });

            modelBuilder.Entity("Domain.Entitys.MealModel.MealTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly?>("BreakFastTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("BreakFastTimeStart")
                        .HasColumnType("time");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("DinnerTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("DinnerTimeStart")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("LunchTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("LunchTimeStart")
                        .HasColumnType("time");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MealTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreakFastTimeEnd = new TimeOnly(11, 0, 0),
                            BreakFastTimeStart = new TimeOnly(8, 0, 0),
                            DinnerTimeEnd = new TimeOnly(23, 0, 0),
                            DinnerTimeStart = new TimeOnly(19, 0, 0),
                            LunchTimeEnd = new TimeOnly(16, 0, 0),
                            LunchTimeStart = new TimeOnly(12, 0, 0)
                        });
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.Menu", b =>
                {
                    b.HasOne("Domain.Entitys.AuthModel.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.RoleMenu", b =>
                {
                    b.HasOne("Domain.Entitys.AuthModel.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entitys.AuthModel.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.UserRole", b =>
                {
                    b.HasOne("Domain.Entitys.AuthModel.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitys.AuthModel.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitys.MealModel.DailyMeal", b =>
                {
                    b.HasOne("Domain.Entitys.AuthModel.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entitys.MealModel.EmployeeMealDay", b =>
                {
                    b.HasOne("Domain.Entitys.AuthModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.Menu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.Role", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entitys.AuthModel.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
